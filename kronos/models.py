from django.db import models

class ChatbotInteraction(models.Model):
    """
    Model to store user-chatbot interactions.
    It records each user message and the chatbot's response.
    """
    user_message = models.TextField(help_text="Message sent by the user.")
    chatbot_response = models.TextField(help_text="Response generated by the chatbot.")
    timestamp = models.DateTimeField(auto_now_add=True, help_text="Timestamp of the interaction.")
    
    def __str__(self):
        return f"Interaction at {self.timestamp}: {self.user_message[:20]}..."

class Course(models.Model):
    """
    Model to store information about available courses.
    Each course can have multiple topics and associated quizzes.
    """
    title = models.CharField(max_length=255)
    description = models.TextField()
    topics = models.JSONField()  # List of topics as JSON
    materials = models.TextField()  # Course content
    
    def __str__(self):
        return self.title

class Topic(models.Model):
    """
    Model to store topics related to each course.
    """
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name="topics", help_text="The course this topic belongs to.")
    title = models.CharField(max_length=255, help_text="The title of the topic.")
    content = models.TextField(help_text="Content or summary of the topic.")
    
    def __str__(self):
        return self.title

class Quiz(models.Model):
    """
    Model to store quizzes for each course topic.
    """
    topic = models.ForeignKey(Topic, on_delete=models.CASCADE, related_name="quizzes", help_text="The topic this quiz belongs to.")
    question = models.CharField(max_length=512, help_text="The question to be asked.")
    option_a = models.CharField(max_length=255, help_text="Option A for the question.")
    option_b = models.CharField(max_length=255, help_text="Option B for the question.")
    option_c = models.CharField(max_length=255, help_text="Option C for the question.")
    option_d = models.CharField(max_length=255, help_text="Option D for the question.")
    correct_answer = models.CharField(max_length=255, help_text="Correct answer for the question.")
    
    def __str__(self):
        return f"Quiz for {self.topic.title} - {self.question[:20]}..."

class UploadedFile(models.Model):
    """
    Model to store uploaded files (e.g., PDFs).
    Tracks the file path and upload time.
    """
    file = models.FileField(upload_to='uploads/')
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"File uploaded at {self.uploaded_at}: {self.file.name}"

class YouTubeLink(models.Model):
    """
    Model to store YouTube links along with their transcripts.
    Used for storing video URL and transcript.
    """
    url = models.URLField()  # YouTube video URL
    transcript = models.TextField(blank=True)  # Video transcript, can be empty if not available

    def __str__(self):
        return f"YouTube Video: {self.url}"
